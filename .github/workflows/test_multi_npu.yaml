name: 'run benchmarks'

on:
  schedule:
  - cron: '00 16 * * *'

  workflow_dispatch:
    inputs:
      runner:
        required: true
        type: choice
        options:
          - linux-arm64-npu-4
          - linux-arm64-npu-1
        default: 'linux-arm64-npu-1'
        description: 'The runner selected to run on'
      image:
        required: true
        type: choice
        options:
          - ascendai/cann:8.0.0-910b-ubuntu22.04-py3.10
        default: 'ascendai/cann:8.0.0-910b-ubuntu22.04-py3.10'
        description: 'The docker image which will be loaded'


# Bash shells do not use ~/.profile or ~/.bashrc so these shells need to be explicitly
# declared as "shell: bash -el {0}" on steps that need to be properly activated.
# It's used to activate ascend-toolkit environment variables.
defaults:
  run:
    shell: bash -el {0}

jobs:
  test:
    name: run benchmarks
    runs-on: ${{ github.event.inputs.runner || 'linux-arm64-npu-1' }}
    container:
      image: ${{ github.event.inputs.image || 'ascendai/cann:8.0.0-910b-ubuntu22.04-py3.10' }}
      env:
        HF_ENDPOINT: https://hf-mirror.com
        # VLLM_USE_MODELSCOPE: true
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        ES_OM_DOMAIN: ${{ secrets.ES_OM_DOMAIN }}
        ES_OM_AUTHORIZATION: ${{ secrets.ES_OM_AUTHORIZATION }}
    steps:
      - name: Check npu and CANN info
        run: |
          npu-smi info
          cat /usr/local/Ascend/ascend-toolkit/latest/"$(uname -i)"-linux/ascend_toolkit_install.info

      - name: Config mirrors
        run: |
          pip config set global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple

      - name: Install system dependencies
        run: |
          apt-get update -y
          apt-get -y install git jq wget curl lsof gcc g++ cmake libnuma-dev

      - name: Config git
        run: |
          git config --global url."https://gh-proxy.test.osinfra.cn/https://github.com/".insteadOf https://github.com/

      - name: Checkout vllm-project/vllm repo
        uses: actions/checkout@v4
        with:
          repository: vllm-project/vllm
          path: ./
          
      - name: Checkout vllm-project/vllm-ascend repo
        uses: actions/checkout@v4
        with:
          repository: vllm-project/vllm-ascend
          path: ./vllm-ascend
          fetch-depth: 0

      - name: Install vllm-project/vllm from source
        run: |
          VLLM_TARGET_DEVICE=empty pip install -e .

      - name: Download pta
        run: |
          if [ ! -d /root/.cache/pta ]; then
            mkdir -p /root/.cache/pta
          fi
  
          if [ ! -f /root/.cache/pta/torch_npu-2.5.1.dev20250320-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl ]; then
            cd /root/.cache/pta
            rm -rf pytorch_v2.5.1_py310*
            wget https://pytorch-package.obs.cn-north-4.myhuaweicloud.com/pta/Daily/v2.5.1/20250320.3/pytorch_v2.5.1_py310.tar.gz
            tar -zxvf pytorch_v2.5.1_py310.tar.gz
          fi
  
          pip install /root/.cache/pta/torch_npu-2.5.1.dev20250320-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl
  
      - name: Install vllm-project/vllm-ascend
        working-directory: ./vllm-ascend
        run: |
          pip install -e .

      - name: Checkout nv-action/vllm-benchmarks repo
        uses: actions/checkout@v4
        with:
          repository: nv-action/vllm-benchmarks
          path: ./vllm-benchmarks
      
      - name: Install benchmark dependencies
        working-directory: ./vllm-benchmarks
        run: |
          pip install -r requirements.txt
      
      - name: Checkout cosdt/elastic-tool
        uses: actions/checkout@v4
        with:
          repository: cosdt/elastic-tool
          path: ./elastic_tool
          ref: 0.1.0-dev

      - name: Install elastic_tool
        working-directory: ./elastic_tool
        run: |
          pip install -e .
          
      - name: Collect pr info from vllm-project/vllm-ascend
        working-directory: ./vllm-ascend
        run: |
          # Only get the pull request which may influences performance
          git log --pretty=format:"%H %s" -- '**/*.py' ':!docs/*' ':!tests/*' ':!examples/*' > commit_log.txt
          # Filter out the commits not saved in the es
          escli check commit_log.txt --tag $(git branch --show-current)

      - name: Prepare dataset
        working-directory: ./vllm-benchmarks
        run: |
          cp /root/.cache/datasets/sharegpt/ShareGPT_V3_unfiltered_cleaned_split.json ./benchmarks

      - name: Run benchmark iteration
        working-directory: ./vllm-ascend
        run: |
          while IFS= read -r line || [[ -n "$line" ]]; do
            commit_id=$(awk '{print $1}' <<< "$line")
            commit_title=$(awk '{$1=""; print substr($0, 2)}' <<< "$line")
            commit_time=$(git show -s --format=%cd $commit_hash --date=iso-strict)
            commit_time_no_tz=$(echo "$commit_time" | sed 's/[+-][0-9][0-9]:[0-9][0-9]$//')
            cur_tag=$(git branch --show-current)

            git checkout $commit_id
            pip install -e .
            echo "------------------------"
            echo "commit_id: $commit_id"
            echo "commit_title: $commit_title"
            echo "commit_time: $commit_time_no_tz"
            echo "cur_tag: $cur_tag"
            echo "------------------------"
            # for now we use current repo script to have a test
            cd ../vllm-benchmarks
            bash benchmarks/scripts/run-performance-benchmarks.sh
            # send the result to es
            escli add --tag $cur_tag \
            --commit_id $commit_id \
            --commit_title "$commit_title" \
            --created_at "$commit_time_no_tz" \
            --res_dir ./benchmarks/results 
            rm -rf ./benchmarks/results
            cd -
          done < commit_log.txt
